diff --git a/source/fitz/font.c b/source/fitz/font.c
index cd5c764..d3f61cc 100644
--- a/source/fitz/font.c
+++ b/source/fitz/font.c
@@ -307,7 +307,12 @@ fz_font *fz_load_fallback_font(fz_context *ctx, int script, int serif, int bold,
 		data = fz_lookup_noto_font(ctx, script, 1, &size);
 		if (data)
 		{
+#ifndef NOBUILTINFONT
 			ctx->font->fallback[script].serif = fz_new_font_from_memory(ctx, NULL, data, size, 0, 0);
+#else
+			ctx->font->fallback[script].serif = fz_new_font_from_file(ctx, NULL, data, 0, 0);
+			free((char*)data);
+#endif
 			return ctx->font->fallback[script].serif;
 		}
 	}
@@ -317,7 +322,12 @@ fz_font *fz_load_fallback_font(fz_context *ctx, int script, int serif, int bold,
 	data = fz_lookup_noto_font(ctx, script, 0, &size);
 	if (data)
 	{
+#ifndef NOBUILTINFONT
 		ctx->font->fallback[script].sans = fz_new_font_from_memory(ctx, NULL, data, size, 0, 0);
+#else
+		ctx->font->fallback[script].sans = fz_new_font_from_file(ctx, NULL, data, 0, 0);
+		free((char*)data);
+#endif
 		return ctx->font->fallback[script].sans;
 	}

@@ -331,8 +341,15 @@ fz_font *fz_load_fallback_symbol_font(fz_context *ctx)
 	if (!ctx->font->symbol)
 	{
 		data = fz_lookup_noto_symbol_font(ctx, &size);
+#ifndef NOBUILTINFONT
 		if (data)
 			ctx->font->symbol = fz_new_font_from_memory(ctx, NULL, data, size, 0, 0);
+#else
+		if (data) {
+			ctx->font->symbol = fz_new_font_from_file(ctx, NULL, data, 0, 0);
+			free((char*)data);
+		}
+#endif
 	}
 	return ctx->font->symbol;
 }
@@ -344,8 +361,15 @@ fz_font *fz_load_fallback_emoji_font(fz_context *ctx)
 	if (!ctx->font->emoji)
 	{
 		data = fz_lookup_noto_emoji_font(ctx, &size);
+#ifndef NOBUILTINFONT
 		if (data)
 			ctx->font->emoji = fz_new_font_from_memory(ctx, NULL, data, size, 0, 0);
+#else
+		if (data) {
+			ctx->font->emoji = fz_new_font_from_file(ctx, NULL, data, 0, 0);
+			free((char*)data);
+		}
+#endif
 	}
 	return ctx->font->emoji;
 }
diff --git a/source/fitz/noto.c b/source/fitz/noto.c
index 1ac6e6c..ea260fb 100644
--- a/source/fitz/noto.c
+++ b/source/fitz/noto.c
@@ -37,6 +37,7 @@
 	extern const char fz_font_ ## NAME []; \
 	return *size = fz_font_ ## NAME ## _size, fz_font_ ## NAME

+#ifndef NOBUILTINFONT
 const char *
 fz_lookup_base14_font(fz_context *ctx, const char *name, int *size)
 {
@@ -96,6 +97,119 @@ fz_lookup_builtin_font(fz_context *ctx, const char *name, int is_bold, int is_it
 	return *size = 0, NULL;
 }

+#else // NOBUILTINFONT
+
+const char *
+get_font_file(char *name)
+{
+	char *fontdir;
+	char *filename;
+	int len;
+	fontdir = getenv("FONTDIR");
+	if(fontdir == NULL) {
+		fontdir = "./fonts";
+	}
+	len = strlen(fontdir) + strlen(name) + 2;
+	filename = malloc(len);
+	if(filename == NULL) {
+		return NULL;
+	}
+	snprintf(filename, len, "%s/%s", fontdir, name);
+	return filename;
+}
+
+const char *
+fz_lookup_base14_font(fz_context *ctx, const char *name, int *size)
+{
+	*size = 0;
+	if (!strcmp("Courier", name)) {
+		return get_font_file("urw/NimbusMono-Regular.cff");
+	}
+	if (!strcmp("Courier-Oblique", name)) {
+		return get_font_file("urw/NimbusMono-Oblique.cff");
+	}
+	if (!strcmp("Courier-Bold", name)) {
+		return get_font_file("urw/NimbusMono-Bold.cff");
+	}
+	if (!strcmp("Courier-BoldOblique", name)) {
+		return get_font_file("urw/NimbusMono-BoldOblique.cff");
+	}
+	if (!strcmp("Helvetica", name)) {
+		return get_font_file("urw/NimbusSanL-Reg.cff");
+	}
+	if (!strcmp("Helvetica-Oblique", name)) {
+		return get_font_file("urw/NimbusSanL-RegIta.cff");
+	}
+	if (!strcmp("Helvetica-Bold", name)) {
+		return get_font_file("urw/NimbusSanL-Bol.cff");
+	}
+	if (!strcmp("Helvetica-BoldOblique", name)) {
+		return get_font_file("urw/NimbusSanL-BolIta.cff");
+	}
+	if (!strcmp("Times-Roman", name)) {
+		return get_font_file("urw/NimbusRomNo9L-Reg.cff");
+	}
+	if (!strcmp("Times-Italic", name)) {
+		return get_font_file("urw/NimbusRomNo9L-RegIta.cff");
+	}
+	if (!strcmp("Times-Bold", name)) {
+		return get_font_file("urw/NimbusRomNo9L-Med.cff");
+	}
+	if (!strcmp("Times-BoldItalic", name)) {
+		return get_font_file("urw/NimbusRomNo9L-MedIta.cff");
+	}
+	if (!strcmp("Symbol", name)) {
+		return get_font_file("urw/StandardSymL.cff");
+	}
+	if (!strcmp("ZapfDingbats", name)) {
+		return get_font_file("urw/Dingbats.cff");
+	}
+	return NULL;
+}
+
+#define FAMILY(R, I, B, BI) \
+	if (!is_bold) { \
+		if (!is_italic) { return get_font_file(R); } else { return get_font_file(I); } \
+	} else { \
+		if (!is_italic) { return get_font_file(B); } else { return get_font_file(BI); } \
+	}
+
+const char *
+fz_lookup_builtin_font(fz_context *ctx, const char *name, int is_bold, int is_italic, int *size)
+{
+	*size = 0;
+	if (!strcmp(name, "Courier")) {
+		FAMILY("urw/NimbusMono-Regular.cff",
+				"urw/NimbusMono-Oblique.cff",
+				"urw/NimbusMono-Bold.cff",
+				"urw/NimbusMono-BoldOblique.cff")
+	}
+	if (!strcmp(name, "Helvetica") || !strcmp(name, "Arial")) {
+		FAMILY("urw/NimbusSanL-Reg.cff",
+				"urw/NimbusSanL-RegIta.cff",
+				"urw/NimbusSanL-Bol.cff",
+				"urw/NimbusSanL-BolIta.cff")
+	}
+	if (!strcmp(name, "Times") || !strcmp(name, "Times Roman") || !strcmp(name, "Times New Roman")) {
+		FAMILY("urw/NimbusRomNo9L-Reg.cff",
+				"urw/NimbusRomNo9L-RegIta.cff",
+				"urw/NimbusRomNo9L-Med.cff",
+				"urw/NimbusRomNo9L-MedIta.cff")
+	}
+#ifndef TOFU
+	if (!strcmp(name, "Noto Serif")) {
+		return get_font_file("noto/NotoSerif-Regular.ttf");
+	}
+	if (!strcmp(name, "Noto Sans")) {
+		return get_font_file("noto/NotoSans-Regular.ttf");
+	}
+#endif
+	return NULL;
+}
+#endif // EOF NOBUILTINFONT
+
+
+#ifndef NOBUILTINFONT
 const char *
 fz_lookup_cjk_font(fz_context *ctx, int registry, int serif, int wmode, int *size, int *index)
 {
@@ -112,12 +226,36 @@ fz_lookup_cjk_font(fz_context *ctx, int registry, int serif, int wmode, int *siz
 #endif
 }

+#else // NOBUILTINFONT
+
+const char *
+fz_lookup_cjk_font(fz_context *ctx, int registry, int serif, int wmode, int *len, int *index)
+{
+	*len = 0;
+	return get_font_file("noto/NotoSansCJK-Regular.ttf");
+}
+#endif // EOF NOBUILTINFONT
+
+#define NOBUILTINFONT
+
+#ifndef NOBUILTINFONT
 #define Noto(SANS) { RETURN(Noto ## SANS ## _Regular_ttf); } break
+#else // NOBUILTINFONT
+#define STRINGIZE(A) #A
+#define Noto(SANS) { *size = 0; return get_font_file(STRINGIZE(noto/Noto##SANS-Regular.ttf)); } break
+#endif // EOF NOBUILTINFONT

+#ifndef NOBUILTINFONT
 #define Noto2(SANS,SERIF) \
 	if (serif) { RETURN(Noto ## SERIF ## _Regular_ttf); } \
 	else { RETURN(Noto ## SANS ## _Regular_ttf); } \
 	break
+#else // NOBUILTINFONT
+#define Noto2(SANS,SERIF) \
+	if (serif) { Noto(SERIF); } \
+	else { Noto(SANS); } \
+	break
+#endif // EOF NOBUILTINFONT

 #define Noto3(SANS,SERIF,UNUSED) \
 	Noto2(SANS,SERIF)
@@ -289,7 +427,13 @@ const char *
 fz_lookup_noto_symbol_font(fz_context *ctx, int *size)
 {
 #ifndef TOFU_SYMBOL
+
+#ifndef NOBUILTINFONT
 	RETURN(NotoSansSymbols_Regular_ttf);
+#else // NOBUILTINFONT
+	return get_font_file("noto/NotoSansSymbols-Regular.ttf");
+#endif
+
 #else
 	return *size = 0, NULL;
 #endif
@@ -299,7 +443,13 @@ const char *
 fz_lookup_noto_emoji_font(fz_context *ctx, int *size)
 {
 #ifndef TOFU_EMOJI
+
+#ifndef NOBUILTINFONT
 	RETURN(NotoEmoji_Regular_ttf);
+#else // NOBUILTINFONT
+	return get_font_file("noto/NotoEmoji-Regular.ttf");
+#endif
+
 #else
 	return *size = 0, NULL;
 #endif
diff --git a/source/html/html-font.c b/source/html/html-font.c
index 389ddb3..0e9395c 100644
--- a/source/html/html-font.c
+++ b/source/html/html-font.c
@@ -15,7 +15,12 @@ fz_load_html_default_font(fz_context *ctx, fz_html_font_set *set, const char *fa
 		data = fz_lookup_builtin_font(ctx, real_family, is_bold, is_italic, &size);
 		if (!data)
 			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot load html font: %s", real_family);
+#ifndef NOBUILTINFONT
 		set->fonts[idx] = fz_new_font_from_memory(ctx, NULL, data, size, 0, 1);
+#else
+		set->fonts[idx] = fz_new_font_from_file(ctx, NULL, data, 0, 1);
+		free((char*)data);
+#endif
 		set->fonts[idx]->is_serif = !is_sans;
 	}
 	return set->fonts[idx];
@@ -56,7 +61,12 @@ fz_load_html_font(fz_context *ctx, fz_html_font_set *set, const char *family, in
 	data = fz_lookup_builtin_font(ctx, family, is_bold, is_italic, &size);
 	if (data)
 	{
+#ifndef NOBUILTINFONT
 		fz_font *font = fz_new_font_from_memory(ctx, NULL, data, size, 0, 0);
+#else
+		fz_font *font = fz_new_font_from_file(ctx, NULL, data, 0, 0);
+		free((char*)data);
+#endif
 		if (is_bold && !font->is_bold)
 			font->fake_bold = 1;
 		if (is_italic && !font->is_italic)
diff --git a/source/pdf/pdf-font.c b/source/pdf/pdf-font.c
index c3513cb..1811754 100644
--- a/source/pdf/pdf-font.c
+++ b/source/pdf/pdf-font.c
@@ -241,7 +241,12 @@ pdf_load_builtin_font(fz_context *ctx, pdf_font_desc *fontdesc, char *fontname,
 		if (!data)
 			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot find builtin font: '%s'", fontname);

+#ifndef NOBUILTINFONT
 		fontdesc->font = fz_new_font_from_memory(ctx, fontname, data, len, 0, 1);
+#else
+		fontdesc->font = fz_new_font_from_file(ctx, fontname, data, 0, 1);
+		free((char*)data);
+#endif
 		fontdesc->font->is_serif = !!strstr(clean_name, "Times");
 	}

@@ -266,7 +271,12 @@ pdf_load_substitute_font(fz_context *ctx, pdf_font_desc *fontdesc, char *fontnam
 		if (!data)
 			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot find substitute font");

+#ifndef NOBUILTINFONT
 		fontdesc->font = fz_new_font_from_memory(ctx, fontname, data, len, 0, 1);
+#else
+		fontdesc->font = fz_new_font_from_file(ctx, fontname, data, 0, 1);
+		free((char*)data);
+#endif
 		fontdesc->font->fake_bold = bold && !fontdesc->font->is_bold;
 		fontdesc->font->fake_italic = italic && !fontdesc->font->is_italic;

@@ -295,7 +305,12 @@ pdf_load_substitute_cjk_font(fz_context *ctx, pdf_font_desc *fontdesc, char *fon
 			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot find builtin CJK font");

 		/* A glyph bbox cache is too big for CJK fonts. */
+#ifndef NOBUILTINFONT
 		fontdesc->font = fz_new_font_from_memory(ctx, fontname, data, len, index, 0);
+#else
+		fontdesc->font = fz_new_font_from_file(ctx, fontname, data, 0, 1);
+		free((char*)data);
+#endif
 	}

 	fontdesc->font->ft_substitute = 1;
--
1.9.1

